" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
  "colorscheme desert
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
set nocompatible
set hlsearch
set mouse=a		" Enable mouse usage (all modes)
set ts=4
set sw=4
set number
"set helplang=cn


" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

function! AutoLoadCTagsAndCScope()
    let max = 5
    let dir = getcwd() . "/"
	let path = '.tag/'
    let i = 0
    let break = 0
    while isdirectory(dir) && i < max
        if filereadable(dir . path . 'cscope') 
            execute 'cs add ' . dir . path . 'cscope'
            let break = 1
        endif
        if filereadable(dir . path . 'tags')
            execute 'set tags =' . dir . path . 'tags'
            let break = 1
        endif
        if break == 1
            "execute 'lcd ' . dir . path
			echo "tags from" dir . path
            break
        endif
        let dir = dir . '../'
        let i = i + 1
    endwhile
endf
nmap <F7> :call AutoLoadCTagsAndCScope()<CR>
"call AutoLoadCTagsAndCScope()

"cscope setting
set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>

nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>

nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>

nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>

nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>

nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>

nmap <C-\>i :cs find i <C-R>=expand("<cfile>")<CR><CR>

nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


"F8单独切换打开taglist（taglist插件） 
let g:Tlist_Auto_Open=0
"let g:Tlist_Sort_Type = 'name'         "以名称顺序排序，默认以位置顺序(order) 
let g:Tlist_Show_One_File = 1           "不同时显示多个文件的tag，只显示当前文件的 
let g:Tlist_Exit_OnlyWindow = 1         "如果taglist窗口是最后一个窗口，则退出vim 
lef g:Tlist_File_Fold_Auto_Close = 1    "当光标不在编辑文件里面的时候全部折叠 
let g:Tlist_Use_Right_Window = 1        "在右侧窗口中显示taglist窗口 
let g:Tlist_Enable_Fold_Column = 0      "显示折叠边栏 
"show tag list
nmap tl  :TlistToggle<CR>

"let g:winManagerWindowLayout='FileExplorer|TagList'
let g:winManagerWindowLayout='FileExplorer'
"show file list
nmap fl :WMToggle<cr>

let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplMapWindowNavArrows = 1

filetype plugin indent on
set completeopt=longest,menu
